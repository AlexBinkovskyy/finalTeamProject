{"version":3,"file":"static/js/770.54fce5cf.chunk.js","mappings":"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","sources":["webpack://final-team-project/./src/components/SignUpForm/SignUpForm.module.css?655f","components/SignUpForm/SignUpForm.jsx","webpack://final-team-project/./src/Pages/SignUpPage/SignUpPage.module.css?4083","Pages/SignUpPage/SignUpPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SignUpForm_form__OYKon\",\"title\":\"SignUpForm_title__rBa0C\",\"button\":\"SignUpForm_button__RIhAk\",\"input\":\"SignUpForm_input__2jKXC\",\"errorInput\":\"SignUpForm_errorInput__LEXPY\",\"label\":\"SignUpForm_label__TcM9x\",\"error\":\"SignUpForm_error__BQm0T\",\"errorContainer\":\"SignUpForm_errorContainer__cGLOl\",\"text\":\"SignUpForm_text__Gls3a\",\"link\":\"SignUpForm_link__33Ms0\",\"eyeIcon\":\"SignUpForm_eyeIcon__oGVeF\",\"eyeBtn\":\"SignUpForm_eyeBtn__TD0j1\",\"divWrap\":\"SignUpForm_divWrap__xqibl\"};","import css from './SignUpForm.module.css';\nimport { useId, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { signup } from '../../redux/auth/operations';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Image from '../../image/sprite.svg';\nimport { useTranslation } from 'react-i18next';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email('Must be valid email!').required('Required'),\n  password: Yup.string()\n    .min(7, 'Too Short!')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      ' Must contain: capital, uppercase letter, number'\n    )\n    .required('Required'),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Please repeat your password'),\n});\n\nexport default function SignUpForm() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t, i18n } = useTranslation();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const emailFieldId = useId();\n  const passwordFieldId = useId();\n  const repeatPassword = useId();\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(prevState => !prevState);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n    mode: 'onChange',\n  });\n\n  const onSubmit = async ({ email, password }) => {\n    dispatch(signup({ credentials: { email, password }, i18n }))\n      .unwrap()\n      .then(() => {\n        reset();\n        navigate('/confirm-page');\n      });\n  };\n\n  return (\n    <div className={css.divWrap}>\n      <h1 className={css.title}>{t('signin_page.signup')}</h1>\n      <form onSubmit={handleSubmit(onSubmit)} className={css.form}>\n        <label htmlFor={emailFieldId} className={css.label}>\n          {t('auth_form.email')}\n        </label>\n        <div className={css.errorContainer}>\n          <input\n            {...register('email')}\n            className={`${css.input} ${errors.email && css.errorInput}`}\n            id={emailFieldId}\n            placeholder={t('auth_form.emailEnter')}\n          />\n          {errors.email && (\n            <span className={css.error}>{errors.email.message}</span>\n          )}\n        </div>\n\n        <label htmlFor={passwordFieldId} className={css.label}>\n          {t('auth_form.password')}\n        </label>\n        <div className={css.errorContainer}>\n          <input\n            {...register('password')}\n            autoComplete=\"off\"\n            className={`${css.input} ${errors.password && css.errorInput}`}\n            id={passwordFieldId}\n            placeholder={t('auth_form.passwordEnter')}\n            type={showPassword ? 'text' : 'password'}\n          />\n          {errors.password && (\n            <span className={css.error}>{errors.password.message}</span>\n          )}\n\n          <button\n            type=\"button\"\n            className={css.eyeBtn}\n            onClick={togglePasswordVisibility}\n          >\n            {showPassword ? (\n              <svg className={css.eyeIcon} width=\"18\" height=\"18\">\n                <use href={`${Image}#IconEye`} />\n              </svg>\n            ) : (\n              <svg className={`${css.eyeIcon}`} width=\"18\" height=\"18\">\n                <use href={`${Image}#IconEye-off`} />\n              </svg>\n            )}\n          </button>\n        </div>\n\n        <label htmlFor={repeatPassword} className={css.label}>\n          {t('auth_form.repeatPassword')}\n        </label>\n        <div className={css.errorContainer}>\n          <input\n            {...register('repeatPassword')}\n            autoComplete=\"off\"\n            className={`${css.input} ${\n              errors.repeatPassword && css.errorInput\n            }`}\n            id={repeatPassword}\n            placeholder={t('auth_form.repeatPassword')}\n            type={showPassword ? 'text' : 'password'}\n          />\n          {errors.repeatPassword && (\n            <span className={css.error}>{errors.repeatPassword.message}</span>\n          )}\n\n          <button\n            type=\"button\"\n            className={css.eyeBtn}\n            onClick={togglePasswordVisibility}\n          >\n            {showPassword ? (\n              <svg className={css.eyeIcon} width=\"18\" height=\"18\">\n                <use href={`${Image}#IconEye`} />\n              </svg>\n            ) : (\n              <svg className={`${css.eyeIcon}`} width=\"18\" height=\"18\">\n                <use href={`${Image}#IconEye-off`} />\n              </svg>\n            )}\n          </button>\n        </div>\n\n        <button type=\"submit\" className={css.button}>\n          {t('signin_page.signup')}\n        </button>\n      </form>\n      <p className={css.text}>\n        {t('signin_page.alreadyHave')}{' '}\n        <Link to=\"/signin\" className={css.link}>\n          {t('signin_page.signin')}\n        </Link>\n      </p>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"divMain\":\"SignUpPage_divMain__ow8fC\",\"div\":\"SignUpPage_div__PbzDP\",\"advantage\":\"SignUpPage_advantage__s9eNc\"};","import Logo from 'components/Logo/Logo';\nimport SignUpForm from 'components/SignUpForm/SignUpForm';\nimport css from './SignUpPage.module.css';\nimport AdvantagesSection from 'Sections/AdvantagesSection/AdvantagesSection';\nimport { useSelector } from 'react-redux';\nimport { selectIsRefreshing } from '../../redux/auth/selectors';\nimport Loader from 'components/Loader/Loader';\n\nexport default function SignUpPage() {\n  const loading = useSelector(selectIsRefreshing);\n\n  return (\n    <>\n      {loading && <Loader />}\n      <div className={css.divMain}>\n        <div className={css.div}>\n          <Logo />\n          <SignUpForm />\n        </div>\n        <div className={css.advantage}>\n          {window.innerWidth >= 1440 && <AdvantagesSection />}\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["validationSchema","Yup","shape","email","required","password","min","matches","repeatPassword","oneOf","SignUpForm","dispatch","useDispatch","navigate","useNavigate","t","i18n","useTranslation","showPassword","setShowPassword","useState","emailFieldId","useId","passwordFieldId","togglePasswordVisibility","prevState","register","handleSubmit","reset","formState","errors","useForm","resolver","yupResolver","mode","_jsxs","className","css","children","_jsx","onSubmit","async","_ref","signup","credentials","unwrap","then","htmlFor","concat","id","placeholder","message","autoComplete","type","onClick","width","height","href","Image","Link","to","SignUpPage","loading","useSelector","selectIsRefreshing","_Fragment","Loader","Logo","window","innerWidth","AdvantagesSection"],"sourceRoot":""}